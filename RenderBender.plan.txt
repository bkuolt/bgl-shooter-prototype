Hinweise:
	- verwendet jetzt GLUT v3.7.6 (wegen Mausrad)
Bugs:
	- Frustummaße der Ebene der Rückseite ist fehlerhaft.
	  Als Workaround werden die Maße grob manuell angepasst.
	- Sehr,sehr wenige sichtbare Cluster zeigen fälschlicherweise
	  keine sichtbaren Cluster an ("Visible Clusters: 0").
Workarounds:
	- Rotation des Frustums und der Kamera,da keine
	  Rotation um einen beliebigen Vektor/Achse durch die
	  Mathebibliothek möglich ist.
TODO:
	- Hohe Priorität: 
	  Kollisionserkennung der (Kamera-)AABB und der Polygone,die
	  sichtbar sind.
	- Mittlere Priorität: Frustumfehler beheben (s.o.)
	- Mittlere Priorität: Clusterfehler bebehen (s.o.)
	- Mittlere Priorität: Lightmaps nicht erstellen,speichern und dann laden,sondern
	  nur erstellen und als OpenGL-Texturobjekt speichern.
	- Niedrige Priorität: Rotationssystem verbessern (s.o.)
	- Niedrige Priorität: Steuerung "feinfühliger" machen
	- Sehr Niedrige Priorität: Geschwindigkeitsvektoren für Bewegungen implementieren.
	
	Nebenläufig (mittlere Priorität):
	- Generallisierung des Medienpfades
	- Demo version erstellenn (entsprechende Map und entsprechende Texturen suchen)
	- Map auswahl verbessern
	
Kollisionserkennung der Kamera:
	- Algorithmus:
		(1) AABB für Kamera erstellen (wie im "IT Projekt"),d.h. u.a nur AABB nur mit Kamera verschieben und nicht mitrotieren!
		(2) 	- alle sichtbren Cluster durchlaufen
				- alle Blätter des Clusters durchlaufen
				- alle Polygone des Blatts durchlaufen
		(3) für jedes Polygon:
			- überprüfen,ob Eckpunkt vor Ebene liegt
				- Wenn ein Eckpunkt dahinter liegt -> Kollision! ->Test abbrechen!
					- Wenn kein Eckpunkt dahinter liegt für alle Polygone aller Blätter 
					  aller Cluser -> keine Kollision!
		- Perfektionierung
			- Wenn Ebene des Polygons AABB schneiden würde,
			  Kamera(-AABB) so nah wie möglich an Ebene verschieben.
			  Dabei muss berücksichtigt werden,dass der mögliche Schnittpunkt
			  in der Polygonfläche liegt!
			- Treppen bzw. Steigungenerkennung
	- Implementierungsideen:
		- "AABB vs Plane"  - Methode
		- "wouldIntersect" - Methode 
		- für Perfektionierung "getNearestPosition" - Methode,die den entsprechenden 
		  Verschiebungsvektor zurückgibt. Dabei müssen alle in Frage kommenden
		  Polygone berücksichtigt werden.
		  
TOTHINK:
	- Treppenerkennung
	- Höhenerkennung (z.B. "von Plattform herrunterfliegen")
	- Gravitation